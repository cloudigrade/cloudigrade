name: Push

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/cloudigrade
  NGINX_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/cloudinginx

on: [push]

jobs:
  test-py38:
    name: py38
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:latest
    steps:
      - uses: actions/checkout@v2
      - run: pip install tox codecov poetry
      - run: tox -e py38
      - run: codecov

  test-flake8:
    name: flake8
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:latest
    steps:
      - uses: actions/checkout@v2
      - run: pip install tox codecov poetry
      - run: tox -e flake8

  test-vulnerability:
    name: Vulnerability
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:latest
    steps:
      - uses: actions/checkout@v2
      - run: pip install poetry safety
      - run: poetry install
      - run: safety check

  test-docker:
    name: Docker Build
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    steps:
      - uses: actions/checkout@v2
      - run: docker pull $IMAGE_NAME:latest || true
      - run: docker build --cache-from $IMAGE_NAME:latest .

  test-s2i:
    name: s2i Build
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    env:
      CONTEXT_DIR: deployment/nginx/
      NGINX_S2I_IMAGE: registry.redhat.io/rhel8/nginx-116:latest
      S2I_VERSION: v1.3.1
      S2I_RELEASE: source-to-image-v1.3.1-a5a77147-linux-amd64
    steps:
      - uses: actions/checkout@v2
      - run: apk --no-cache add git
      - run: mkdir -p /opt && cd /opt
      - run: wget https://github.com/openshift/source-to-image/releases/download/${S2I_VERSION}/${S2I_RELEASE}.tar.gz -O /opt/s2i.tar.gz
      - run: tar --strip-components=1 -xzvf /opt/s2i.tar.gz -C /opt/
      - run: mv /opt/s2i /usr/bin/
      - env:
          REDHAT_REGISTRY_LOGIN: ${{ secrets.REDHAT_REGISTRY_LOGIN }}
        run: ${REDHAT_REGISTRY_LOGIN}
      - run: s2i build --context-dir=${CONTEXT_DIR} --ref ${GITHUB_REF##*/} ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} ${NGINX_S2I_IMAGE} ${NGINX_IMAGE_NAME}:latest

  test-docs:
    name: Verify docs and openapi.json
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:latest
    steps:
      - uses: actions/checkout@v2
      - run: pip install poetry
      - run: poetry install
      - run: poetry run make docs-api-examples-test
      - run: poetry run make openapi-test
        env:
          AWS_SQS_ACCESS_KEY_ID: "foo"
          AWS_SQS_SECRET_ACCESS_KEY: "bar"
      - run: poetry run openapi-spec-validator openapi.json
      - run: poetry run openapi-spec-validator openapi-internal.json

  deploy-build-and-push-image:
    name: Build and Push Image
    if: github.ref == 'refs/heads/master'
    needs: [test-py38, test-flake8, test-vulnerability, test-docker, test-s2i, test-docs]
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    env:
      GHCR_BOT_USERNAME: ${{ secrets.GHCR_BOT_USERNAME }}
      GHCR_BOT_TOKEN: ${{ secrets.GHCR_BOT_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - run: echo "${GHCR_BOT_TOKEN}" | docker login ghcr.io -u ${GHCR_BOT_USERNAME} --password-stdin
      - run: docker pull $IMAGE_NAME:latest || true
      - run: docker build --cache-from ${IMAGE_NAME}:latest --tag ${IMAGE_NAME}:${{ github.sha }} --tag ${IMAGE_NAME}:latest .
      - run: docker push ${IMAGE_NAME}:${{ github.sha }}
      - run: docker push ${IMAGE_NAME}:latest

  deploy-build-and-push-nginx-image:
    name: Build and Push NGINX Image
    if: github.ref == 'refs/heads/master'
    needs: [test-py38, test-flake8, test-vulnerability, test-docker, test-s2i, test-docs]
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    env:
      CONTEXT_DIR: deployment/nginx/
      GHCR_BOT_USERNAME: ${{ secrets.GHCR_BOT_USERNAME }}
      GHCR_BOT_TOKEN: ${{ secrets.GHCR_BOT_TOKEN }}
      NGINX_S2I_IMAGE: registry.redhat.io/rhel8/nginx-116:latest
      S2I_VERSION: v1.3.1
      S2I_RELEASE: source-to-image-v1.3.1-a5a77147-linux-amd64
    steps:
      - uses: actions/checkout@v2
      - run: apk --no-cache add git
      - run: mkdir -p /opt && cd /opt
      - run: wget https://github.com/openshift/source-to-image/releases/download/${S2I_VERSION}/${S2I_RELEASE}.tar.gz -O /opt/s2i.tar.gz
      - run: tar --strip-components=1 -xzvf /opt/s2i.tar.gz -C /opt/
      - run: mv /opt/s2i /usr/bin/
      - env:
          REDHAT_REGISTRY_LOGIN: ${{ secrets.REDHAT_REGISTRY_LOGIN }}
        run: ${REDHAT_REGISTRY_LOGIN}
      - run: s2i build --context-dir=${CONTEXT_DIR} --ref ${GITHUB_REF##*/} ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} ${NGINX_S2I_IMAGE} ${NGINX_IMAGE_NAME}:${{ github.sha }}
      - run: echo "${GHCR_BOT_TOKEN}" | docker login ghcr.io -u ${GHCR_BOT_USERNAME} --password-stdin
      - run: docker push ${NGINX_IMAGE_NAME}:${{ github.sha }}
      - run: docker tag ${NGINX_IMAGE_NAME}:${{ github.sha }} ${NGINX_IMAGE_NAME}:latest
      - run: docker push ${NGINX_IMAGE_NAME}:latest

  deploy-trigger-quay-copy:
    name: Trigger ghcr to quay copy
    if: github.ref == 'refs/heads/master'
    env:
      WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
    needs: [deploy-build-and-push-image, deploy-build-and-push-nginx-image]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:latest
    steps:
      - name: Webhook
        uses: distributhor/workflow-webhook@v1.0.5
        env:
          webhook_type: "json-extended"
          webhook_url: "https://ci.ext.devshift.net/github-webhook/"
          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}  # Does not matter, but provided because it is required.


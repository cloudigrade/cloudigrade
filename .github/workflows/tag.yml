name: Tag

env:
  IMAGE_NAME: quay.io/cloudservices/cloudigrade

on:
  release:
    types:
      - created

jobs:
  test-py39:
    name: py39
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:ubi84-python39
    steps:
      - uses: actions/checkout@v2
      - run: pip install tox codecov poetry
      - run: tox -e py39
      - run: codecov

  test-flake8:
    name: flake8
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:ubi84-python39
    steps:
      - uses: actions/checkout@v2
      - run: pip install tox codecov poetry
      - run: tox -e flake8

  test-vulnerability:
    name: Vulnerability
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:ubi84-python39
    steps:
      - uses: actions/checkout@v2
      - run: pip install poetry safety
      - run: poetry install
      - run: safety check

  test-docker:
    name: Docker Build
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    steps:
      - uses: actions/checkout@v2
      - run: docker pull $IMAGE_NAME:latest || true
      - run: docker build --cache-from $IMAGE_NAME:latest .

  test-docs:
    name: Verify docs and openapi.json
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/build-container:ubi84-python39
    steps:
      - uses: actions/checkout@v2
      - run: pip install poetry
      - run: poetry install
      - run: poetry run make docs-api-examples-test
      - run: poetry run make openapi-test
      - run: poetry run openapi-spec-validator openapi.json
      - run: poetry run openapi-spec-validator openapi-internal.json

  deploy-build-and-push-tagged-image:
    name: Build and Push Tagged Image
    env:
      COMMIT_TAG: ${{ github.event.release.tag_name }}
      QUAY_BOT_USERNAME: ${{ secrets.QUAY_BOT_USERNAME }}
      QUAY_BOT_TOKEN: ${{ secrets.QUAY_BOT_TOKEN}}
    needs: [test-py39, test-flake8, test-vulnerability, test-docker, test-docs]
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "${QUAY_BOT_TOKEN}" | docker login quay.io -u ${QUAY_BOT_USERNAME} --password-stdin
      - run: docker pull $IMAGE_NAME:latest || true
      - run: docker build --cache-from ${IMAGE_NAME}:latest --tag ${IMAGE_NAME}:${COMMIT_TAG} .
      - run: docker push ${IMAGE_NAME}:${COMMIT_TAG}

apiVersion: v1
kind: Template
metadata:
  name: cloudigrade-persistent-template
labels:
  template: cloudigrade-persistent-template
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: cloudigrade
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${NAME}
    strategy:
      recreateParams:
        mid:
          execNewPod:
            command:
            - scl
            - enable
            - rh-postgresql96
            - rh-python36
            - ./manage.py collectstatic --no-input && ./manage.py migrate
            containerName: ${NAME}
            volumes:
            - ${NAME}-static
          failurePolicy: Abort
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
      spec:
        containers:
        - env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws-access-key-id
                name: ${NAME}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws-secret-access-key
                name: ${NAME}
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                key: aws-default-region
                name: ${NAME}
          - name: DJANGO_SETTINGS_MODULE
            valueFrom:
              secretKeyRef:
                key: django-settings-module
                name: ${NAME}
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: django-secret-key
                name: ${NAME}
          - name: DJANGO_ALLOWED_HOSTS
            valueFrom:
              secretKeyRef:
                key: django-allowed-hosts
                name: ${NAME}
          - name: DJANGO_DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DB_SECRETS_FILE}
          - name: DJANGO_DATABASE_HOST
            valueFrom:
              secretKeyRef:
                key: django-database-host
                name: ${NAME}
          - name: DJANGO_DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DB_SECRETS_FILE}
          - name: DJANGO_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DB_SECRETS_FILE}
          - name: DJANGO_DEBUG
            valueFrom:
              secretKeyRef:
                key: django-debug
                name: ${NAME}
          - name: RABBITMQ_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: ${RABBITMQ_SECRETS_FILE}
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: ${RABBITMQ_SECRETS_FILE}
          - name: RABBITMQ_HOST
            valueFrom:
              secretKeyRef:
                key: rabbitmq-host
                name: ${NAME}
          - name: RABBITMQ_PORT
            valueFrom:
              secretKeyRef:
                key: rabbitmq-port
                name: ${NAME}
          image: ' '
          imagePullPolicy: Always
          name: ${NAME}
          resources:
            limits:
              memory: 512Mi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'ps axo command | grep -v grep | grep gunicorn'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'nc -U /var/run/cloudigrade/gunicorn.sock --send-only </dev/null'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /var/run/cloudigrade
            name: ${NAME}-socket
          - mountPath: /srv/cloudigrade/static
            name: ${NAME}-static
        - name: nginx
          image: ' '
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          livenessProbe:
            tcpSocket:
              port: 8080
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz/
              port: 8080
              scheme: HTTP
              httpHeaders:
                - name: Host
                  value: health.cloudigrade.insights.openshiftapps.com
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /var/run/cloudigrade
            name: ${NAME}-socket
          - mountPath: /srv/cloudigrade/static
            name: ${NAME}-static
        volumes:
        - name: ${NAME}-socket
          emptyDir: {}
        - name: ${NAME}-static
          persistentVolumeClaim:
            claimName: ${NAME}-static
    triggers:
      - type: "ImageChange"
        imageChangeParams:
          automatic: true
          containerNames:
            - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
            namespace: ${NAMESPACE}
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - nginx
          from:
            kind: ImageStreamTag
            name: ${NAME}-nginx:latest
            namespace: ${NAMESPACE}
      - type: ConfigChange
- kind: Secret
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/base64-expose-aws-access-key-id: "{.data['aws-access-key-id']}"
      template.openshift.io/base64-expose-aws-secret-access-key: "{.data['aws-secret-access-key']}"
      template.openshift.io/base64-expose-aws-default-region: "{.data['aws-default-region']}"
      template.openshift.io/base64-expose-django-allowed-hosts: "{.data['django-allowed-hosts']}"
      template.openshift.io/base64-expose-django-database-host: "{.data['django-database-host']}"
      template.openshift.io/base64-expose-django-debug: "{.data['django-debug']}"
      template.openshift.io/base64-expose-django-secret-key: "{.data['django-secret-key']}"
      template.openshift.io/base64-expose-django-settings-module: "{.data['django-settings-module']}"
      template.openshift.io/base64-expose-rabbitmq-host: "{.data['rabbitmq-host']}"
    name: ${NAME}
  stringData:
    aws-access-key-id: ${AWS_ACCESS_KEY_ID}
    aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
    aws-default-region: ${AWS_DEFAULT_REGION}
    django-allowed-hosts: ${DJANGO_ALLOWED_HOSTS}
    django-database-host: ${DJANGO_DATABASE_HOST}
    django-debug: ${DJANGO_DEBUG}
    django-secret-key: ${DJANGO_SECRET_KEY}
    django-settings-module: ${DJANGO_SETTINGS_MODULE}
    rabbitmq-host: ${RABBITMQ_HOST}
    rabbitmq-port: ${RABBITMQ_PORT}
  type: Opaque
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${NAME}-nginx
  spec:
    failedBuildsHistoryLimit: 5
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}-nginx:latest
    runPolicy: Serial
    source:
      contextDir: ${NGINX_REPO_CONTEXT_DIR}
      git:
        uri: ${NGINX_CONFIG_SOURCE_URI}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: DockerImage
          name: centos/nginx-112-centos7:latest
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_TOKEN}
      type: GitHub
    - generic:
        secret: ${GENERIC_TOKEN}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${NAME}-nginx
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${NAME}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: cloudigrade/cloudigrade
      name: latest
      referencePolicy:
        type: Source
      importPolicy:
        scheduled: true
- kind: Route
  apiVersion: v1
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    name: ${NAME}
  spec:
    port:
      targetPort: nginx
    to:
      kind: Service
      name: ${NAME}
      weight: 100
    wildcardPolicy: None
- kind: Service
  apiVersion: v1
  metadata:
    name: ${NAME}
  spec:
    ports:
    - name: nginx
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${NAME}
    sessionAffinity: None
    type: ClusterIP
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${NAME}-static
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${PVC_VOLUME_SIZE}
parameters:
# Project Names
- name: NAME
  displayName: Name
  description: "Application Name"
  value: "cloudigrade"
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: "Namespace where the application is being deployed"
  value: "cloudigrade-test"
  required: true
# AWS Settings
- name: AWS_ACCESS_KEY_ID
  displayName: AWS Access Key ID
  description: "AWS Access Key ID"
  required: true
- name: AWS_SECRET_ACCESS_KEY
  displayName: AWS Secret Access Key
  description: "AWS Secret Access Key"
  required: true
- name: AWS_DEFAULT_REGION
  displayName: AWS Default Region
  description: "Default AWS Region"
  value: "us-east-1"
  required: true
# Secret File Names
- name: DB_SECRETS_FILE
  displayName: DB Secrets File Name
  description: "Name of DB secrets file"
  value: "postgresql"
  required: true
- name: RABBITMQ_SECRETS_FILE
  displayName: RabbitMQ Secrets File Name
  description: "Name of RabbitMQ secrets file"
  value: "rabbitmq"
  required: true
# PVC Settings - cloudigrade-static
- name: PVC_VOLUME_SIZE
  displayName: PVC Volume Size
  description: "Cloudigrade-Static Volume Claim Size"
  value: "1Gi"
  required: true
# NGINX Container Build Settings
- name: NGINX_CONFIG_SOURCE_URI
  displayName: NGINX Configuration Source Repository URI
  description: "Repository containing nginx.conf"
  value: "https://github.com/cloudigrade/cloudigrade.git"
  required: true
- name: NGINX_REPO_CONTEXT_DIR
  displayName: NGINX Configuration Repo Context Directory
  description: "Context Directory for nginx.conf"
  value: "deployment/nginx/"
  required: true
- name: GITHUB_TOKEN
  displayName: GitHub Webhook Token
  description: "GitHub Webhook Secret Token for nginx build"
  from: "[\\w]{12}"
  generate: expression
  required: true
- name: GENERIC_TOKEN
  displayName: Generic Webhook Token
  description: "Generic Webhook Secret Token for nginx build"
  from: "[\\w]{12}"
  generate: expression
  required: true
# Cloudigrade Django Settings
- name: DJANGO_ALLOWED_HOSTS
  description: "Hosts allowed to serve this application"
  value: .insights.openshiftapps.com
  required: true
- name: DJANGO_DEBUG
  description: "Django Debug Mode"
  value: "False"
  required: true
- name: DJANGO_SECRET_KEY
  description: "Django Secret Key"
  from: "[\\w]{64}"
  generate: expression
  required: true
- name: DJANGO_SETTINGS_MODULE
  description: "Settings file to use"
  value: config.settings.prod
  required: true
- name: DJANGO_DATABASE_HOST
  description: "Your db instance host"
  value: postgresql.cloudigrade-test.svc
  required: true
- name: RABBITMQ_HOST
  description: "Your rabbitmq host"
  value: rabbitmq.cloudigrade-test.svc
  required: true
- name: RABBITMQ_PORT
  description: "Your rabbitmq port"
  value: "5672"
  required: true
